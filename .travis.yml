sudo: required
services:
- docker
language: python
python:
- '3.6'
before_install:
- docker version
- docker info
install:
- npm install newman
- pip install -r requirements.txt
- pip install -r test-requirements.txt
- pip install nose
- pip install Flask-Testing
before_script:
- node --version
- npm --version
- node_modules/.bin/newman --version
script:
- python -m unittest discover
- docker build -t swagger-spring-example:1.0.0 .
- docker run --name example_api -d -t -p 127.0.0.1:8080:8080 swagger-spring-example:1.0.0
- docker ps
- count=0 && until $(curl --output /dev/null --silent --head --fail http://localhost:8080);
  do printf '.' && sleep 3 && count=$((count+1)) && if [ $count -gt 5 ]; then break;
  fi; done
- docker logs example_api
- node_modules/.bin/newman run ./postmantests/postman_collection.json -e ./postmantests/postman_environment.json
after_success:
- docker login -u $DOCKER_USER -p $DOCKER_PASS
- docker build paulspencer/lab2 -t
- docker tag paulspencer/lab2 paulspencer/lab2
- docker push paulspencer/lab2
env:
  global:
  - secure: NNjmCUFBVP7gxiX+Lv8+vWMxgo7pFMDbOOLqSclQCvDjp1qCDb45rq/WRWlmUl02l6sZ5hGLIYppx1XPjWEhuWKPgZIXQ6vlXzvg/wzy0I3dGFm8PMcZwoW6b4ToCPNvAHD561MfOznBcoxQoVMGRhR8CDm2RXe8SV3yT6y35vMRrw1xo6U+fukLWJXrLwCu+R9bzED+ra4ml8wQEBo3LJOa5v0oXXunr3eXJtN0o27hQCTtLf3nSrC9dn0O+5ntLYnXZI92KdPysgndaMo2muPlXtRrdp30av26dAIKK3qv+sBW1TlfK6p6eTFMx0F/0cYzEv/03sfcXhVf2rny0QC+wiyAD1L//BegCczlan7vG1NtdU1llVeTuLPOK0cCFDwyRv6pxfcze9S7JIjWpzqpoprMnZilZa3wYeW8AtnZBscMbe6S43meIv9uvySGP8y5BoBV6JJbxWZaGjqdj4e3gRtU11Naa/QZ69VNAzz/VNkxlvPmlY1RhYK2g2gidsdMYt79vkHGLnEibyKiR9BsmK7xe/Dh8v2y74th3x+eQCij1R1NTh0kwp+cj0IV7Pux9zazvBSyA3ch5/WEfBUykg+LpeF7ZDIiE5THlwprCVCL83vs+sWTjvcHIIppPgfdGyp/FJu9wOH7BM8UqqeEynDuqYyPNHlzJr63+6s=
  - secure: jTxc/xihQZfcsEHtMpotN0P7CsxkgR8OG1fKC2IKgxuxe5sGAAoPFSVaqmRFEdQ31OssJ+u45wafdC/Bpvw1Se29bsUsADzYu0kdRqrJYum+I8qQV3yyONVgmZFi6kq7a3kbYzLcxizqHVQJd1a/cMiJ40Ly1Lw27ponSZKBTdwipbkjn3auEMp5PIPt2osUN/5zwCzyV9N8CgTPjECwX3TnBY0hTUk9P6XgG74DC90v4SokidwmyOOz3cAZLxKN3bt9IX2XleVfMuWdeo6iWeAlebdgoRNJ0SMJ9shQr1FJvGvHpNu09b7akRE9TXUsEBUdA+8gsVBvB0faoYz97rSgWJKdLbDhCoIVgD22opSKlQ318Lxa55S64Irt4zOqhHY2omCgOF7sSj+aQYKEX61DjFX3zXQmHikIMMCd+nDr31U6BeRQJcMscOMjA+KjMw2zO+LK9TsmGvpvoLE92iW5V+6XITCA5ZFRUwRveYEfWFS43wQWsg/MOjV6qUMt9xtf9mm0leNQr+OJu93PRxw2pxqcbqtCvtv+RnRQGCKl1Kp78ZeQfnVO52bUvJ408NAcotz0+f3D2RRBNlVm4j4oQzpP4m9tnqqua5hSnfzuzcp3EHhvvjO009Ygahg2rqdNZWT2aQZBKr8+xWUIFFNTZ2R2fTFVjYjRlwSnVv0=
